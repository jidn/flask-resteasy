{"name":"Flask-RESTeasy","tagline":"Flask extension for easy REST APIs","body":"[![build status](https://travis-ci.org/jidn/flask-resteasy.svg?branch=master)](https://travis-ci.org/jidn/flask-resteasy.svg?branch=masterp)\r\n![version](http://img.shields.io/pypi/v/flask-resteasy.svg)\r\n![license](http://img.shields.io/pypi/l/flask-resteasy.svg)\r\n[![coverage](http://img.shields.io/coveralls/jidn/flask-resteasy/master.svg)](https://coveralls.io/r/jidn/flask-resteasy)\r\n![downloads](http://img.shields.io/pypi/dm/flask-resteasy.svg)\r\n\r\n# Flask-RESTeasy\r\n\r\nIt starts with an itch.  I was using Flask-RESTful but I soon started\r\nhaving to work around it with request parsing and output fields caused\r\nerrors.  I got frustrated.  I loved the project, but it was doing more\r\nthan what I wanted it to do.\r\n\r\nI just wanted something to ease the setup and binding of flask MethodViews\r\nfor handling JSON REST APIs.  The rest can be handled by other packages\r\ndedicated to their tasks.  I kept the basic resource handling for both\r\napps and blueprints and removed the rest: request parsing, output fields,\r\nauthentication, and static error handling.\r\n\r\nI wanted something simple in the way Flask was simple.  This is my\r\nattempt at making it so.  If you have seen Flask-RESTful, this will\r\nlook very familiar.\r\n\r\n# Install\r\n\r\nFor install you can use pip:\r\n\r\n```console\r\n$ pip install flask_resteasy\r\n```\r\n\r\n# QuickStart\r\n```python\r\nfrom flask import Flask\r\nfrom flask.ext import resteasy\r\n\r\napp = Flask(__name__)\r\napi = resteasy.Api(app)\r\n\r\n@api.resource('/')\r\nclass HelloWorld(resteasy.Resource):\r\n    def get(self):\r\n        return {'msg': 'Hello world'}\r\n\r\n    def delete(self):\r\n        return {'msg': 'Sorry Dave.'}\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```\r\n\r\nExecute that code and you have a running server on port 5000.  If you get an error, you probably have something else running on that port.  Either stop the other process or change the port in your Flask app.\r\n\r\nNow either check with a browser, or use the following commands.\r\n\r\n```console\r\n$ curl http://localhost:5000\r\n{\"msg\": \"Hello world\"}\r\n\r\n$ curl http://localhost:5000 -X \"DELETE\"\r\n{\"msg\": \"Sorry Dave.\"}\r\n```\r\n","google":"UA-74921514-1","note":"Don't delete this file! It's used internally to help with page regeneration."}